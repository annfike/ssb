from ssbbot.models import Profile, Stuff

import logging
import os
import re

import aiogram.utils.markdown as fmt
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import KeyboardButton
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from dotenv import load_dotenv

from django.core.management.base import BaseCommand

import aiogram.utils.markdown as fmt
import time
from datetime import date, timedelta
from pytimeparse import parse
import pyqrcode
from geopy.distance import geodesic as GD

os.environ["DJANGO_ALLOW_ASYNC_UNSAFE"] = "true"


logging.basicConfig(level=logging.INFO)
load_dotenv()
token = os.getenv("BOT_KEY")
user_data = {}
bot = Bot(token=token, parse_mode=types.ParseMode.HTML)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


class FsmAdmin(StatesGroup):
    first_name = State()
    last_name = State()
    email = State()
    passport = State()


@dp.message_handler(commands='start')
async def cmd_start(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True).add(
        KeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ—é –ª–æ–∫–∞—Ü–∏—é üó∫Ô∏è', request_location=True)
    )
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –≤–∞–º –∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –ª–∏—á–Ω—É—é —è—á–µ–π–∫—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–µ—â–µ–π.\n"
     "–ü—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, —á—Ç–æ–±—ã –≤—ã –≤—ã–±—Ä–∞–ª–∏ –±–ª–∏–∂–∞–π—à–∏–π —Å–∫–ª–∞–¥!", reply_markup=keyboard)

@dp.message_handler(content_types=['location'])
async def handle_location(message: types.Location):
    user_data['lat'] = message.location.latitude
    user_data['lon'] = message.location.longitude
    user_location = (user_data['lat'], user_data['lon'])
    location_anino = (55.581818, 37.594978)
    location_chinatown = (55.75634, 37.63002)
    location_vdnh = (55.82177, 37.64107)
    location_mitino = (55.84589, 37.35909)
    location_spartak = (55.8176765, 37.4345436)
    location_sokol = (55.80518, 37.51495)
    distance_anino = round(GD(user_location, location_anino).km)
    distance_chinatown = round(GD(user_location, location_chinatown).km)
    distance_vdnh = round(GD(user_location, location_vdnh).km)
    distance_mitino = round(GD(user_location, location_mitino).km)
    distance_spartak = round(GD(user_location, location_spartak).km)
    distance_sokol = round(GD(user_location, location_sokol).km)


    keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True, one_time_keyboard=True)

    buttons = [
        f"–º–µ—Ç—Ä–æ –ê–Ω–∏–Ω–æ \n({distance_anino} –∫–º –æ—Ç –≤–∞—Å)",
        f"–º–µ—Ç—Ä–æ –ö–∏—Ç–∞–π-–ì–æ—Ä–æ–¥ \n({distance_chinatown} –∫–º –æ—Ç –≤–∞—Å)",
        f"–º–µ—Ç—Ä–æ –í–î–ù–• \n({distance_vdnh} –∫–º –æ—Ç –≤–∞—Å)",
        f"–º–µ—Ç—Ä–æ –ú–∏—Ç–∏–Ω–æ \n({distance_mitino} –∫–º –æ—Ç –≤–∞—Å)",
        f"–º–µ—Ç—Ä–æ –°–ø–∞—Ä—Ç–∞–∫ \n({distance_spartak} –∫–º –æ—Ç –≤–∞—Å)",
        f"–º–µ—Ç—Ä–æ –°–æ–∫–æ–ª \n({distance_sokol} –∫–º –æ—Ç –≤–∞—Å)",
    ]
    keyboard.add(*buttons)
    await bot.delete_message(message.from_user.id, message.message_id)
    await message.answer('–ö–∞–∫–æ–π –∞–¥—Ä–µ—Å –≤–∞–º –ø–æ–¥—Ö–æ–¥–∏—Ç?', reply_markup=keyboard)


@dp.message_handler(text_contains="–º–µ—Ç—Ä–æ")
async def sklad_1_answer(message: types.Message):
    user_data['adress'] = message.text

  
    keyboard = types.InlineKeyboardMarkup(row_width=2, resize_keyboard=True)

    buttons = [
        types.InlineKeyboardButton(text='—Å–µ–∑–æ–Ω–Ω—ã–µ –≤–µ—â–∏', callback_data='—Å–µ–∑–æ–Ω–Ω—ã–µ –≤–µ—â–∏'),
        types.InlineKeyboardButton(text='–¥—Ä—É–≥–æ–µ', callback_data='–¥—Ä—É–≥–æ–µ')
    ]
    keyboard.add(*buttons)
    await bot.delete_message(message.from_user.id, message.message_id)
    await message.answer("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Ö—Ä–∞–Ω–∏—Ç—å?:", reply_markup=keyboard)


@dp.callback_query_handler(text='—Å–µ–∑–æ–Ω–Ω—ã–µ –≤–µ—â–∏')
async def send_msg(call: types.CallbackQuery):

    buttons = [
        types.InlineKeyboardButton(text='–õ—ã–∂–∏', callback_data='–õ—ã–∂–∏'),
        types.InlineKeyboardButton(text='–°–Ω–æ—É–±–æ—Ä–¥', callback_data='–°–Ω–æ—É–±–æ—Ä–¥'),
        types.InlineKeyboardButton(text='–í–µ–ª–æ—Å–∏–ø–µ–¥', callback_data='–í–µ–ª–æ—Å–∏–ø–µ–¥'),
        types.InlineKeyboardButton(text='–ö–æ–ª–µ—Å–∞', callback_data='–ö–æ–ª–µ—Å–∞'),
               ]

    keyboard = types.InlineKeyboardMarkup(row_width=2, resize_keyboard=True)
    keyboard.add(*buttons)
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=keyboard)
    await call.answer()


@dp.callback_query_handler(text='–õ—ã–∂–∏')
@dp.callback_query_handler(text='–°–Ω–æ—É–±–æ—Ä–¥')
@dp.callback_query_handler(text='–í–µ–ª–æ—Å–∏–ø–µ–¥')
@dp.callback_query_handler(text='–ö–æ–ª–µ—Å–∞')
async def seasonal_choose_quantity(call: types.CallbackQuery):
    user_data['item'] = call.data
    await call.message.answer(
        fmt.text(
            fmt.text(fmt.hunderline("–£—Å–ª–æ–≤–∏—è:\n\n")),
            fmt.text('1 –ª—ã–∂–∏ - 100 —Ä/–Ω–µ–¥–µ–ª—è –∏–ª–∏ 300 —Ä/–º–µ—Å\n'),
            fmt.text('1 —Å–Ω–æ—É–±–æ—Ä–¥ - 100 —Ä/–Ω–µ–¥–µ–ª—è –∏–ª–∏ 300 —Ä/–º–µ—Å\n'),
            fmt.text('4 –∫–æ–ª–µ—Å–∞ - 200 —Ä/–º–µ—Å\n'),
            fmt.text('1 –≤–µ–ª–æ—Å–∏–ø–µ–¥ - 150 —Ä/ –Ω–µ–¥–µ–ª—è –∏–ª–∏ 400 —Ä/–º–µ—Å\n'),
        ),
        reply_markup=types.ReplyKeyboardRemove()
    )
    buttons = [
        types.InlineKeyboardButton(
            text=f'{cell} —à—Ç', callback_data=f'{cell} —à—Ç') for cell in range(1, 11)
    ]
    keyboard = types.InlineKeyboardMarkup(row_width=5, resize_keyboard=True)
    keyboard.add(*buttons)
    await call.message.answer("–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–µ—â–µ–π –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è.", reply_markup=keyboard)
    await call.answer()


@ dp.callback_query_handler(text_contains='—à—Ç')
async def seasonal_choose_period(call: types.CallbackQuery):
    user_data['quantity'] = call.data
    buttons = [
        types.InlineKeyboardButton(text='1 –Ω–µ–¥–µ–ª—è', callback_data='1 –Ω–µ–¥–µ–ª—è'),
        types.InlineKeyboardButton(text='2 –Ω–µ–¥–µ–ª–∏', callback_data='2 –Ω–µ–¥–µ–ª–∏'),
        types.InlineKeyboardButton(text='3 –Ω–µ–¥–µ–ª–∏', callback_data='3 –Ω–µ–¥–µ–ª–∏'),
        types.InlineKeyboardButton(text='1 –º–µ—Å—è—Ü', callback_data='1 –º–µ—Å—è—Ü'),
        types.InlineKeyboardButton(text='2 –º–µ—Å—è—Ü–∞', callback_data='2 –º–µ—Å—è—Ü–∞'),
        types.InlineKeyboardButton(text='3 –º–µ—Å—è—Ü–∞', callback_data='3 –º–µ—Å—è—Ü–∞'),
        types.InlineKeyboardButton(text='4 –º–µ—Å—è—Ü–∞', callback_data='4 –º–µ—Å—è—Ü–∞'),
        types.InlineKeyboardButton(text='5 –º–µ—Å—è—Ü–µ–≤', callback_data='5 –º–µ—Å—è—Ü–µ–≤'),
        types.InlineKeyboardButton(text='6 –º–µ—Å—è—Ü–µ–≤', callback_data='6 –º–µ—Å—è—Ü–µ–≤'),
               ]

    keyboard = types.InlineKeyboardMarkup(row_width=3, resize_keyboard=True)
    keyboard.add(*buttons)
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ —Ö—Ä–∞–Ω–µ–Ω–∏—è.", reply_markup=keyboard)
    await bot.delete_message(call.from_user.id, call.message.message_id)
    await call.answer()


@ dp.callback_query_handler(text='1 –Ω–µ–¥–µ–ª—è')
@ dp.callback_query_handler(text='2 –Ω–µ–¥–µ–ª–∏')
@ dp.callback_query_handler(text='3 –Ω–µ–¥–µ–ª–∏')
@ dp.callback_query_handler(text='1 –º–µ—Å—è—Ü')
@ dp.callback_query_handler(text='2 –º–µ—Å—è—Ü–∞')
@ dp.callback_query_handler(text='3 –º–µ—Å—è—Ü–∞')
@ dp.callback_query_handler(text='4 –º–µ—Å—è—Ü–∞')
@ dp.callback_query_handler(text='5 –º–µ—Å—è—Ü–µ–≤')
@ dp.callback_query_handler(text='6 –º–µ—Å—è—Ü–µ–≤')
async def seasonal_book(call: types.CallbackQuery):
    user_data['rent'] = call.data
    periods = {
            '1 –Ω–µ–¥–µ–ª—è': 7,
            '2 –Ω–µ–¥–µ–ª–∏': 14,
            '3 –Ω–µ–¥–µ–ª–∏': 21,
            '1 –º–µ—Å—è—Ü': 31,
            '2 –º–µ—Å—è—Ü–∞': 61,
            '3 –º–µ—Å—è—Ü–∞': 92,
            '4 –º–µ—Å—è—Ü–∞': 122,
            '5 –º–µ—Å—è—Ü–µ–≤': 153,
            '6 –º–µ—Å—è—Ü–µ–≤': 184,
            }
    prices = {
    '–õ—ã–∂–∏': {
        '1 –Ω–µ–¥–µ–ª—è': 100,
        '2 –Ω–µ–¥–µ–ª–∏': 200,
        '3 –Ω–µ–¥–µ–ª–∏': 300,
        '1 –º–µ—Å—è—Ü': 300,
        '2 –º–µ—Å—è—Ü–∞': 600,
        '3 –º–µ—Å—è—Ü–∞': 900,
        '4 –º–µ—Å—è—Ü–∞': 1200,
        '5 –º–µ—Å—è—Ü–µ–≤': 1500,
        '6 –º–µ—Å—è—Ü–µ–≤': 1800,
        },
    '–í–µ–ª–æ—Å–∏–ø–µ–¥': {
        '1 –Ω–µ–¥–µ–ª—è': 150,
        '2 –Ω–µ–¥–µ–ª–∏': 300,
        '3 –Ω–µ–¥–µ–ª–∏': 450,
        '1 –º–µ—Å—è—Ü': 400,
        '2 –º–µ—Å—è—Ü–∞': 800,
        '3 –º–µ—Å—è—Ü–∞': 1200,
        '4 –º–µ—Å—è—Ü–∞': 1600,
        '5 –º–µ—Å—è—Ü–µ–≤': 2000,
        '6 –º–µ—Å—è—Ü–µ–≤': 2400,
        },
    '–°–Ω–æ—É–±–æ—Ä–¥': {
        '1 –Ω–µ–¥–µ–ª—è': 100,
        '2 –Ω–µ–¥–µ–ª–∏': 200,
        '3 –Ω–µ–¥–µ–ª–∏': 300,
        '1 –º–µ—Å—è—Ü': 300,
        '2 –º–µ—Å—è—Ü–∞': 600,
        '3 –º–µ—Å—è—Ü–∞': 900,
        '4 –º–µ—Å—è—Ü–∞': 1200,
        '5 –º–µ—Å—è—Ü–µ–≤': 1500,
        '6 –º–µ—Å—è—Ü–µ–≤': 1800,
        },
    '–ö–æ–ª–µ—Å–∞': {
        '1 –º–µ—Å—è—Ü': 200,
        '2 –º–µ—Å—è—Ü–∞': 400,
        '3 –º–µ—Å—è—Ü–∞': 600,
        '4 –º–µ—Å—è—Ü–∞': 800,
        '5 –º–µ—Å—è—Ü–µ–≤': 1000,
        '6 –º–µ—Å—è—Ü–µ–≤': 1200,
        },
    }
    period = user_data['rent']
    period_days = periods[period]
    storage = user_data['adress']
    item = user_data['item']
    quantity = user_data['quantity']
    quantity = re.findall(r'\d+', quantity)[0]
   
    total_price = int(quantity) * prices[item][period]
    user_data['period_days'] = period_days
    user_data['total_price'] = total_price

    buttons = [
        types.InlineKeyboardButton(
            text="–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data='–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å')
    ]
    keyboard = types.InlineKeyboardMarkup(resize_keyboard=True)
    keyboard.add(*buttons)
    await call.message.answer(
        fmt.text(
            fmt.text(fmt.hunderline("–í—ã –≤—ã–±—Ä–∞–ª–∏:")),
            fmt.text(f"\n–ß—Ç–æ —Ö—Ä–∞–Ω–∏–º:   {item} "),
            fmt.text(f"\n–°—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã:   {period} "),
            fmt.text(f"\n–ü–æ –∞–¥—Ä–µ—Å—É:   {storage}"),
            fmt.text(f"\n–°—Ç–æ–∏–º–æ—Å—Ç—å:   {total_price} —Ä—É–±–ª–µ–π"), sep="\n"
        ), reply_markup=keyboard)

    await call.answer()


@dp.callback_query_handler(text='–¥—Ä—É–≥–æ–µ')
async def send_msg_other(call: types.CallbackQuery):
    await call.message.answer(
        fmt.text(
            fmt.text(fmt.hunderline("–£—Å–ª–æ–≤–∏—è:\n\n")),
            fmt.text("599 —Ä—É–± - –ø–µ—Ä–≤—ã–π 1 –∫–≤.–º., –¥–∞–ª–µ–µ +150 —Ä—É–± –∑–∞ –∫–∞–∂–¥—ã–π –∫–≤. –º–µ—Ç—Ä –≤ –º–µ—Å—è—Ü")
        ),
        reply_markup=types.ReplyKeyboardRemove()
    )
    keyboard = types.InlineKeyboardMarkup(row_width=3, resize_keyboard=True)
    buttons = [
        types.InlineKeyboardButton(
            text=f'{cell} –∫–≤ –º', callback_data=f'{cell}w') for cell in range(1, 11)
    ]
    keyboard.add(*buttons)
    await bot.delete_message(call.from_user.id, call.message.message_id)
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —è—á–µ–π–∫–∏:", reply_markup=keyboard)
    await call.answer()


@dp.callback_query_handler(text_contains='w')
async def send_date(call: types.CallbackQuery):
    user_data['size_cell'] = call.data
    buttons = [
        types.InlineKeyboardButton(
            text=f"{month} –º–µ—Å", callback_data=f"{month}a") for month in range(1, 13)
    ]
    keyboard = types.InlineKeyboardMarkup(row_width=4, resize_keyboard=True)
    keyboard.add(*buttons)
    await bot.delete_message(call.from_user.id, call.message.message_id)
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã:", reply_markup=keyboard)
    await call.answer()


@dp.callback_query_handler(text_contains='a')
async def choice_month(call: types.CallbackQuery):
    user_data['rent'] = call.data
    month = re.findall(r'\d+', call.data)
    size = re.findall(r'\d+', user_data['size_cell'])
    if size == "1":
        price_one_month = 599
    else:
        price_one_month = ((int(*size) - 1) * 150) + 599
    total_price = price_one_month * int(*month)

    keyboard_reg = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True, one_time_keyboard=True)
    key = types.KeyboardButton(text="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
    keyboard_reg.add(key)

    period_days = int(*month)*30.5
    user_data['period_days'] = period_days
    user_data['total_price'] = total_price
    user_data['quantity'] = size[0]
    user_data['item'] = '–¥—Ä—É–≥–æ–µ'

    buttons = [
        types.InlineKeyboardButton(
            text="–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data='–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å')
    ]
    keyboard = types.InlineKeyboardMarkup(resize_keyboard=True)
    keyboard.add(*buttons)
    await bot.delete_message(call.from_user.id, call.message.message_id)
    await call.message.answer(
        fmt.text(
            fmt.text(fmt.hunderline("–í—ã –≤—ã–±—Ä–∞–ª–∏:")),
            fmt.text(f"\n–†–∞–∑–º–µ—Ä —è—á–µ–π–∫–∏:   {int(*size)} –∫–≤ –º"),
            fmt.text(f"\n–°—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã:   {int(*month)} –º–µ—Å—è—Ü–µ–≤"),
            fmt.text(f"\n–ü–æ –∞–¥—Ä–µ—Å—É:   {user_data['adress']}"),
            fmt.text(f"\n–°—Ç–æ–∏–º–æ—Å—Ç—å –∏—Ç–æ–≥–æ:   {total_price} —Ä—É–±–ª–µ–π"), sep="\n",
        ), reply_markup=keyboard,
    )
    #await bot.delete_message(call.from_user.id, call.message.message_id)
    await call.answer()


@ dp.callback_query_handler(text='–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å')
async def registration(call: types.CallbackQuery):
    await bot.delete_message(call.from_user.id, call.message.message_id)
    user = call.message["chat"]["first_name"]
    
    try:
        Profile.objects.get(external_id=call.from_user.id)
        buttons = [
        types.InlineKeyboardButton(
            text="–û–ø–ª–∞—Ç–∏—Ç—å", callback_data='–û–ø–ª–∞—Ç–∏—Ç—å')
        ]
        keyboard = types.InlineKeyboardMarkup(resize_keyboard=True)
        keyboard.add(*buttons)
        await call.message.answer(f' {user}, –≤—ã —É–∂–µ —É –Ω–∞—Å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å —Å–Ω–æ–≤–∞! '
                ' –î–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:', reply_markup=keyboard)
        await call.answer()
    except:
        keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True, one_time_keyboard=True)
        buttons = [
            "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è",
            "–û—Ç–º–µ–Ω–∞",
        ]
        keyboard.add(*buttons)
        await call.message.answer(f' {user}, –≤—ã —É –Ω–∞—Å –≤–ø–µ—Ä–≤—ã–µ? –î–∞–≤–∞–π—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è.', reply_markup=keyboard)


@dp.message_handler(lambda message: message.text == "–û—Ç–º–µ–Ω–∞")
async def cancel(message: types.Message):
    await message.answer('–ú–Ω–µ –∂–∞–ª—å, —á—Ç–æ –≤—ã —É—Ö–æ–¥–∏—Ç–µ, –Ω–æ –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ - –Ω–∞–∂–º–∏—Ç–µ /start')


@dp.message_handler(text="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
async def registration(message: types.Message):
    user_id = message.from_user.id
    doc = open('pd.pdf', 'rb')
    await bot.send_document(user_id, doc)
    keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True, one_time_keyboard=True)
    buttons = [
            "–ü—Ä–∏–Ω—è—Ç—å",
            "–û—Ç–∫–∞–∑–∞—Ç—å—Å—è",
    ]
    keyboard.add(*buttons)
    await bot.send_message(
        user_id,
        "–î–ª—è –∑–∞–∫–∞–∑–∞ –Ω—É–∂–Ω–æ –≤–∞—à–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.",
        reply_markup=keyboard,
        )

@dp.message_handler(state=None)
async def begin(message: types.Message):
    if message.text == '–ü—Ä–∏–Ω—è—Ç—å':
        await FsmAdmin.first_name.set()
        await bot.send_message(message.from_user.id, '–£–∫–∞–∂–∏—Ç–µ –∏–º—è')
    if message.text == '–û—Ç–∫–∞–∑–∞—Ç—å—Å—è':
        user_id = message.from_user.id
        doc = open('pd.pdf', 'rb')
        await bot.send_document(user_id, doc)
        keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True, one_time_keyboard=True)
        buttons = [
            "–ü—Ä–∏–Ω—è—Ç—å",
            "–û—Ç–∫–∞–∑–∞—Ç—å—Å—è",
        ]
        keyboard.add(*buttons)
        await bot.send_message(
        user_id,
        "–ò–∑–≤–∏–Ω–∏—Ç–µ, –±–µ–∑ —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑—ã –Ω–µ–≤–æ–∑–º–æ–∂–Ω—ã.",
        reply_markup=keyboard,
        )


@dp.message_handler(state=FsmAdmin.first_name, regexp='[–ê-–Ø–∞-—è]')
async def first_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["first_name"] = message.text
    await bot.send_message(message.from_user.id, '–£–∫–∞–∂–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é')
    await FsmAdmin.next()


@dp.message_handler(state=FsmAdmin.last_name, regexp='[–ê-–Ø–∞-—è]')
async def last_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["last_name"] = message.text
    await bot.send_message(message.from_user.id, '–£–∫–∞–∂–∏—Ç–µ –ø–∞—Å–ø–æ—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ')
    await FsmAdmin.next()


#@dp.message_handler(state=FsmAdmin.email, regexp='[\w\.-]+@[\w\.-]+(\.[\w]+)+')
@dp.message_handler(state=FsmAdmin.email, regexp='[–ê-–Ø–∞-—è]')
async def passport(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["passport"] = message.text
    await message.answer('–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è')
    await FsmAdmin.next()


@dp.message_handler(state=FsmAdmin.passport, regexp='[\d+]')
async def first_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["birthday"] = message.text
    #await FsmAdmin.next()
    await bot.delete_message(message.from_user.id, message.message_id)
    buttons = [
    types.InlineKeyboardButton(
        text="–û–ø–ª–∞—Ç–∏—Ç—å", callback_data='–û–ø–ª–∞—Ç–∏—Ç—å')
    ]
    keyboard = types.InlineKeyboardMarkup(resize_keyboard=True)
    keyboard.add(*buttons)
    # profile = Profile.objects.create(
    #     external_id=message.from_user.id,
    #     username = message["chat"]["username"] or '',
    #     first_name = data["first_name"],
    #     last_name = data["last_name"],
    #     #contact = data["contact"],
    #     passport = data["passport"],
    #     birthday = data["birthday"],
    #     )
    # profile.save()
    await message.answer(f' {data["first_name"]}, –≤—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! '
            ' –î–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:', reply_markup=keyboard)
    await FsmAdmin.next()



@ dp.callback_query_handler(text='–û–ø–ª–∞—Ç–∏—Ç—å')
async def send_qrcode(call: types.CallbackQuery):
    timestr = time.strftime("%Y%m%d-%H%M%S")
    filename = f'{call.message.chat.id}_{timestr}.png'
    images_dir = os.path.join(os.getcwd(), 'QR')
    os.makedirs(images_dir, exist_ok=True)
    filepath = os.path.join(images_dir, filename)
    code = f'{timestr}_{call.message.chat.id}_'
    url=pyqrcode.create(code)
    url.png(filepath,scale=15)
    profile=Profile.objects.get(external_id=call.from_user.id)
    today = date.today()
    storage_date_end = today + timedelta(days=user_data['period_days'])
    storage_date_end = storage_date_end.strftime("%d.%m.%Y")
    storage_date_start = today.strftime("%d.%m.%Y")
    quantity = user_data['quantity']
    quantity = re.findall(r'\d+', quantity)[0]
    stuff = Stuff.objects.create(
    profile=profile,
    storage=user_data['adress'],
    description=user_data['item'],
    quantity=quantity,
    period=f'{storage_date_start}-{storage_date_end}',
    price=user_data['total_price'],
    code=filename,
    )
    stuff.save()

    await call.message.answer('–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω –∏ —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω!'
            ' –í–æ—Ç –≤–∞—à —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –∫–ª—é—á –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–∞—à–µ–º—É –ª–∏—á–Ω–æ–º—É —Å–∫–ª–∞–¥—É. '
            f'–í—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–ø–∞—Å—Ç—å –Ω–∞ —Å–∫–ª–∞–¥ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è –≤ –ø–µ—Ä–∏–æ–¥ —Å {storage_date_start} –ø–æ {storage_date_end}')
    photo = open(filepath, 'rb')
    await bot.send_photo(chat_id=call.message.chat.id, photo=photo)
    await call.message.answer('–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑! –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –µ—â–µ –æ–¥–∏–Ω - –Ω–∞–∂–º–∏—Ç–µ /start')
    

 

#if __name__ == '__main__':
#   executor.start_polling(dp, skip_updates=True)


class Command(BaseCommand):
     executor.start_polling(dp, skip_updates=True)
